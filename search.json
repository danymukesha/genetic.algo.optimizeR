[{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Dany Mukesha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction","text":"vignette demonstrates use genetic.algo.optimizeR package optimize function \\(f(x) = x^2 - 4x + 4\\) using genetic algorithm.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"aim","dir":"Articles","previous_headings":"","what":"Aim","title":"Introduction","text":"Optimize function \\(f(x) = x^2 - 4x + 4\\) find value \\(x\\) minimizes function.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"initial-population","dir":"Articles","previous_headings":"Method","what":"Initial Population","title":"Introduction","text":"start population three individuals: \\(x_1 = 1\\), \\(x_2 = 3\\), \\(x_3 = 0\\).","code":"#devtools::install_github(\"danymukesha/genetic.algo.optimizeR\", upgrade = c(\"never\"),) library(genetic.algo.optimizeR) # Initialize population population <- initialize_population(population_size = 3, min = 0, max = 3) population #> [1] 3 2 0"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"evaluation","dir":"Articles","previous_headings":"Method","what":"Evaluation","title":"Introduction","text":"evaluate fitness individual calculating \\(f(x)\\) \\(x\\) value:","code":"# Evaluate fitness fitness <- evaluate_fitness(population) fitness #> [1] 1 0 4"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"selection","dir":"Articles","previous_headings":"Method","what":"Selection","title":"Introduction","text":"select individuals \\(x_1\\) \\(x_2\\) parents crossover higher fitness.","code":"# Perform selection selected_parents <- selection(population, fitness, num_parents = 2) selected_parents #> [1] 2 3"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"crossover-and-mutation","dir":"Articles","previous_headings":"Method","what":"Crossover and Mutation","title":"Introduction","text":"perform crossover mutation selected parents generate offspring: \\(x_1' = 1\\), \\(x_2' = 3\\).","code":"# Perform crossover offspring <- crossover(selected_parents, offspring_size = 2) offspring #> [1] 2 2  # Perform mutation mutated_offspring <- mutation(offspring, mutation_rate = 0.1) mutated_offspring #> [1] 2.2 2.0"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"replacement","dir":"Articles","previous_headings":"Method","what":"Replacement","title":"Introduction","text":"replace individual \\(x_3\\) offspring \\(x_1'\\), maintaining population size.","code":"# Replace individuals in the population new_population <- replacement(population, mutated_offspring, num_to_replace = 1) new_population #> [1] 3.0 2.0 2.2 # Termination # Repeat the above steps(from Evaluation) for multiple generations or until a termination condition is met."},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/articles/introduction.html","id":"warp-up","dir":"Articles","previous_headings":"","what":"Warp-Up","title":"Introduction","text":"vignette demonstrates usage genetic.algo.optimizeR package optimize given function using genetic algorithm. Users can follow similar steps optimize functions customize parameters needed. ```","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dany Mukesha. Author, maintainer.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mukesha D (2024). genetic.algo.optimizeR: Genetic Algorithm Optimization. R package version 0.1.0, https://danymukesha.github.io/genetic.algo.optimizeR/.","code":"@Manual{,   title = {genetic.algo.optimizeR: Genetic Algorithm Optimization},   author = {Dany Mukesha},   year = {2024},   note = {R package version 0.1.0},   url = {https://danymukesha.github.io/genetic.algo.optimizeR/}, }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/index.html","id":"geneticalgooptimizer-","dir":"","previous_headings":"","what":"Genetic Algorithm Optimization","title":"Genetic Algorithm Optimization","text":"goal genetic.algo.optimizeR optimize function f(x) = x2 − 4x + 4 using genetic algorithm. function represents simple quadratic equation, goal find value x minimizes function. ’s breakdown aim results: Aim: Optimize function f(x) = x2 − 4x + 4 find value x minimizes function. Results: Initial Population: start population three individuals: x1 = 1, x2 = 3, x3 = 0. Evaluation: f(1) = 12 − 4 * 1 + 4 = 1 f(3) = 32 − 4 * 3 + 4 = 1 f(0) = 02 − 4 * 0 + 4 = 4 Selection: select individuals x1 x2 parents crossover higher fitness. Crossover Mutation: perform crossover mutation selected parents generate offspring: x1′ = 1, x2′ = 3. Replacement: replace individual x3 offspring x1′, maintaining population size. multiple generations repeating steps, genetic algorithm aims converge towards optimal near-optimal solution. example, since ’s simple solution space small, expect algorithm converge relatively quickly towards optimal solution x = 2, f(x) = 0. Explaining Graph","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Genetic Algorithm Optimization","text":"example illustrates process genetic algorithm, individuals selected, crossed , replaced iteratively improve population towards finding optimal solution(.e. fitting population). theory Initialize Population: Start population individuals: X1(x=1), X2(x=3), X3(x=0). (Note: values random population highly diversified) space x value kept integer type range 0 3,simplification. Evaluate Fitness: Calculate fitness(f(x)) individual: X1: f(1) = 1^2 - 4*1 + 4 = 1 X2: f(3) = 3^2 - 4*3 + 4 = 1 X3: f(0) = 0^2 - 4*0 + 4 = 4 Coding function f(x) R quadratic function function form: ax2+bx+c ≠0 : f(x) = x2 − 4x + 4 R, write: Plotting quadratic function f(x) First, choose domain want plot f(x). Let’s try 0 ≤ x ≤ 3:  Select parents crossover: Y1(x=1), Y2(x=3)  Z1(x=1), Z2(x=3) (mutation example) Replace X3 Z1, maintaining population size. Repeat Steps 2-5 multiple generations termination condition met. optimal/fitting individuals F quadratic equation, case lowest point graph f(x), : $$ F\\left(\\frac{-b}{2a}, f\\left(\\frac{-b}{2a}\\right)\\right) $$ Adding Fitting plot:  Existing alternative solution Finding x-intercepts f(x) x-intercepts solutions quadratic equation f(x) = 0; can found using quadratic formula: $$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ quantity b2–4ac called discriminant: discriminant positive, f(x) 2 solutions (.e. x-intercepts). discriminant zero, f(x) 1 solution (.e. 1 x-intercept). discriminant negative, f(x) real solutions (.e. intersect x-axis).  Adding x-intercepts plot:","code":"library(genetic.algo.optimizeR)  # Initialize population population <- initialize_population(population_size = 3, min = 0, max = 3) print(\"Initial Population:\") #> [1] \"Initial Population:\" print(population) #> [1] 0 1 2  generation <- 0  # Initialize generation/reputation counter  while (TRUE) {   generation <- generation + 1  # Increment generation/reputation count      # Evaluate fitness   fitness <- evaluate_fitness(population)   print(\"Evaluation:\")   print(fitness)         # Check if the fitness of every individual is close to zero   if (all(abs(fitness) <= 0.01)) {     print(\"Termination Condition Reached: All individuals have fitness close to zero.\")     break   }      # Selection   selected_parents <- selection(population, fitness, num_parents = 2)   print(\"Selection:\")   print(selected_parents)      # Crossover and Mutation   offspring <- crossover(selected_parents, offspring_size = 2)   mutated_offspring <- mutation(offspring, mutation_rate = 0) #(no mutation in this example)   print(\"Crossover and Mutation:\")   print(mutated_offspring)      # Replacement   population <- replacement(population, mutated_offspring, num_to_replace = 1)   print(\"Replacement:\")   print(population) } #> [1] \"Evaluation:\" #> [1] 4 1 0 #> [1] \"Selection:\" #> [1] 2 1 #> [1] \"Crossover and Mutation:\" #> [1] 2 2 #> [1] \"Replacement:\" #> [1] 2 1 2 #> [1] \"Evaluation:\" #> [1] 0 1 0 #> [1] \"Selection:\" #> [1] 2 2 #> [1] \"Crossover and Mutation:\" #> [1] 2 2 #> [1] \"Replacement:\" #> [1] 2 2 2 #> [1] \"Evaluation:\" #> [1] 0 0 0 #> [1] \"Termination Condition Reached: All individuals have fitness close to zero.\"  print(paste(\"Total generations/reputations:\", generation)) #> [1] \"Total generations/reputations: 3\" population <- c(1, 3, 0) population #> [1] 1 3 0 a = 1 b = -4 c = 4 f = function(x) {   a*x^2 + b*x + c } # domain over which we want to plot f(x) x = seq(from=0, to=4, length.out=100) # plot f(x) plot(x, f(x), type = 'l') # type = 'l' plots a line instead of points # plot the x and y axes abline(v = 0,h = 0,  col = \"skyblue\", lty = 3) points(c(1,3), c(f(1),f(3)), col = \"coral1\",pch = 8, cex = 1.5, lty = 3) text(c(1, 3), c(f(1), f(3)), labels = c(\"(x=1, f(x=1))\", \"(x=3, f(x=3))\"), pos = 3)  points(c(0), c(f(0)), col = \"blue\",pch = 8, cex = 1.5, lty = 3) text(c(0), c(f(0)), labels = \"(x=0, f(x=0))\", pos = 4, font = 2) # plot f(x) plot(x, f(x), type = 'l') # type = 'l' plots a line instead of points # plot the x and y axes points(c(1,3), c(f(1),f(3)), col = \"coral1\",pch = 8, cex = 2, lty = 3)   text(c(1, 3), c(f(1), f(3)), labels = c(\"(x=1, f(x=1))\", \"(x=3, f(x=3))\"), pos = 3, font = 2) find.fitting = function(a, b, c) {   x_fitting = -b/(2 * a)   y_fitting = f(x_fitting)   c(x_fitting, y_fitting) } F = find.fitting(a, b, c) # plot f(x) plot(x, f(x), type = 'l') # type = 'l' plots a line instead of points # plot the x and y axes abline(h = 0) abline(v = 0) # add the vertex to the plot points(x = F[1], y = F[2],        pch = 18, cex = 2, col = 'red') # pch controls the form of the point and cex controls its size # add a label next to the point text(x = F[1], y = F[2],      labels = \"Fitting\", pos = 3, col = 'red', font = 10) # pos = 3 places the text above the point # find the x-intercepts of f(x) find.roots = function(a, b, c) {   discriminant = b^2 - 4 * a * c   if (discriminant > 0) {     c((-b - sqrt(discriminant))/(2 * a), (-b + sqrt(discriminant))/(2 * a))   }   else if (discriminant == 0) {     -b / (2 * a)   }   else {     NaN   } } solutions = find.roots(a, b, c) # plot f(x) plot(x, f(x), type = 'l') # type = 'l' plots a line instead of points # plot the x and y axes abline(h = 0) abline(v = 0) # add the x-intercepts to the plot points(x = solutions, y = rep(0, length(solutions)), # x and y coordinates of the x-intercepts        pch = 18, cex = 2, col = 'red') text(x = solutions, y = rep(0, length(solutions)),      labels = rep(\"Fitting(x-intercept)\", length(solutions)),       pos = 3, col = 'red', font = 10)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/crossover.html","id":null,"dir":"Reference","previous_headings":"","what":"Crossover of  selected parents from the fitting population — crossover","title":"Crossover of  selected parents from the fitting population — crossover","text":"function performs crossover selected individuals fit best based predefined condition(aim/objective).  e.g.: optimize function \\(f(x) = x^2 - 4x + 4\\) find value \\(x\\) minimizes function. \\(x\\): represents possible value individual population can .","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/crossover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crossover of  selected parents from the fitting population — crossover","text":"","code":"crossover(selected_parents, offspring_size)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/crossover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crossover of  selected parents from the fitting population — crossover","text":"selected_parents list selected individuals population. offspring_size number offspring selected population .","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/crossover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crossover of  selected parents from the fitting population — crossover","text":"output expected list offspring next generation.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/crossover.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Crossover of  selected parents from the fitting population — crossover","text":"Dany Mukesha","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/crossover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crossover of  selected parents from the fitting population — crossover","text":"","code":"# example of usage if (FALSE) { population <- c(1, 3, 0)  # Evaluate fitness fitness <- evaluate_fitness(population) print(\"Evaluation:\") print(fitness)  #Selection selected_parents <- selection(population, fitness, num_parents = 2) print(\"Selection:\") print(selected_parents)  # Crossover offspring <- crossover(selected_parents, offspring_size = 2) print(\"Crossover:\") print(offspring) }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/evaluate_fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluating the fitness  of the population — evaluate_fitness","title":"Evaluating the fitness  of the population — evaluate_fitness","text":"function described applies equation: $$f(x) = x^2 - 4x + 4$$ assesses every individual \\(x\\) given population, provide overview population fits equation.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/evaluate_fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluating the fitness  of the population — evaluate_fitness","text":"","code":"evaluate_fitness(population)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/evaluate_fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluating the fitness  of the population — evaluate_fitness","text":"population list individuals population.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/evaluate_fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluating the fitness  of the population — evaluate_fitness","text":"output expected list \\(f(x)\\) values calculated individuals population.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/evaluate_fitness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluating the fitness  of the population — evaluate_fitness","text":"Dany Mukesha","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/evaluate_fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluating the fitness  of the population — evaluate_fitness","text":"","code":"# example of usage if (FALSE) { population <- c(1, 3, 0) # Evaluate fitness genetic.algo.optimizeR::evaluate_fitness(population) }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/genetic.algo.optimizeR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"genetic.algo.optimizeR: Genetic Algorithm Optimization — genetic.algo.optimizeR-package","title":"genetic.algo.optimizeR: Genetic Algorithm Optimization — genetic.algo.optimizeR-package","text":"R package learning purposes implements genetic algorithm optimization process.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/genetic.algo.optimizeR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"genetic.algo.optimizeR: Genetic Algorithm Optimization — genetic.algo.optimizeR-package","text":"Maintainer: Dany Mukesha danymukesha@gmail.com (ORCID)","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize population — initialize_population","title":"Initialize population — initialize_population","text":"function described creates population individuals(values).","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize population — initialize_population","text":"","code":"initialize_population(population_size, min = -100, max = 100)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize population — initialize_population","text":"population_size number individuals population. min minimum number individual . max maximum number individual .","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize population — initialize_population","text":"output expected list individuals population size indicated input.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize population — initialize_population","text":"(Note: values random population highly diversified)  space x value kept integer type range 0 3, simplification.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initialize population — initialize_population","text":"Dany Mukesha","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/initialize_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize population — initialize_population","text":"","code":"# example of usage if (FALSE) { genetic.algo.optimizeR::initialize_population(population_size = 3, min = 0, max = 3) }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating the offspring — mutation","title":"Mutating the offspring — mutation","text":"function described mutates offspring selected individuals fit best based predefined condition(aim/objective).  e.g.: optimize function \\(f(x) = x^2 - 4x + 4\\) find value \\(x\\) minimizes function. \\(x\\): represents possible value individual population can .","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating the offspring — mutation","text":"","code":"mutation(offspring, mutation_rate)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating the offspring — mutation","text":"offspring list offspring. mutation_rate probably single offspring modified/mutated.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating the offspring — mutation","text":"output expected list mutated offspring.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mutating the offspring — mutation","text":"mutation needed increase diversity population help next generation close fitness.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mutating the offspring — mutation","text":"Dany Mukesha","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/mutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating the offspring — mutation","text":"","code":"# example of usage if (FALSE) { library(genetic.algo.optimize) population <- c(1, 3, 0)  # Evaluate fitness fitness <- genetic.algo.optimizeR::evaluate_fitness(population) print(\"Evaluation:\") print(fitness)  #Selection selected_parents <- genetic.algo.optimizeR::selection(population, fitness, num_parents = 2) print(\"Selection:\") print(selected_parents)  # Crossover offspring <- genetic.algo.optimizeR::crossover(selected_parents, offspring_size = 2) print(\"Crossover:\") print(offspring)  #Mutation mutated_offspring <- genetic.algo.optimizeR::mutation(offspring, mutation_rate = 0) #(no mutation in this example) print(mutated_offspring) }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/replacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacing non-selected individual(s) — replacement","title":"Replacing non-selected individual(s) — replacement","text":"function replace individual(s) /selected (.e. best fit) based predefined condition(aim/objective).  e.g.: optimize function \\(f(x) = x^2 - 4x + 4\\) find value \\(x\\) minimizes function. \\(x\\): represents possible value individual population can .","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/replacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacing non-selected individual(s) — replacement","text":"","code":"replacement(population, offspring, num_to_replace)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/replacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacing non-selected individual(s) — replacement","text":"population list individuals population offspring list offspring. num_to_replace number selected individuals replaced population.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/replacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacing non-selected individual(s) — replacement","text":"output expected list selected individuals fit best predefined aim.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/replacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replacing non-selected individual(s) — replacement","text":"Dany Mukesha","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/replacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacing non-selected individual(s) — replacement","text":"","code":"# example of usage if (FALSE) { population <- c(1, 3, 0)  # Evaluate fitness fitness <- genetic.algo.optimizeR::evaluate_fitness(population) print(\"Evaluation:\") print(fitness)  #Selection selected_parents <- genetic.algo.optimizeR::selection(population, fitness, num_parents = 2) print(\"Selection:\") print(selected_parents)  # Crossover and mutation offspring <- genetic.algo.optimizeR::crossover(selected_parents, offspring_size = 2) mutated_offspring <- mutation(offspring, mutation_rate = 0) #(no mutation in this example) print(mutated_offspring)  # Replacement population <- genetic.algo.optimizeR::replacement(population, mutated_offspring, num_to_replace = 1) print(\"Replacement:\") print(population) }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Selecting the fitting the population — selection","title":"Selecting the fitting the population — selection","text":"function described selects individuals fit best based predefined condition(aim/objective).  e.g.: optimize function \\(f(x) = x^2 - 4x + 4\\) find value \\(x\\) minimizes function. \\(x\\): represents possible value individual population can .","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selecting the fitting the population — selection","text":"","code":"selection(population, fitness, num_parents)"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selecting the fitting the population — selection","text":"population list individuals population fitness list individuals(value) obtained function genetic.algo.optimizeR namely `evalute_fitness`. num_parents number selected individuals fit best predefined aim.","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selecting the fitting the population — selection","text":"output expected list selected individuals fit best predefined condition(aim/objective).","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/selection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Selecting the fitting the population — selection","text":"Dany Mukesha","code":""},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/reference/selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selecting the fitting the population — selection","text":"","code":"# example of usage if (FALSE) { library(genetic.algo.optimizeR)  population <- c(1, 3, 0)  # Evaluate fitness fitness <- genetic.algo.optimizeR::evaluate_fitness(population) print(\"Evaluation:\") print(fitness)  #Selection selected_parents <- genetic.algo.optimizeR::selection(population, fitness, num_parents = 2) print(\"Selection:\") print(selected_parents) }"},{"path":"https://danymukesha.github.io/genetic.algo.optimizeR/news/index.html","id":"geneticalgooptimizer-010","dir":"Changelog","previous_headings":"","what":"genetic.algo.optimizeR 0.1.0","title":"genetic.algo.optimizeR 0.1.0","text":"Initial CRAN submission.","code":""}]
